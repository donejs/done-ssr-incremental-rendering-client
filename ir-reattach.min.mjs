const Instructions={Zero:0,Insert:1,Remove:2,Move:3,Text:4,SetAttr:5,RemoveAttr:6,Prop:7};var doneMutation_2_1_5_tags=Instructions,decodeNode_1=decodeNode,decodeString_1=decodeString,decodeType_1=decodeType,toUint16_1=toUint16;function toUint16(a){let b=a.next().value,c=a.next().value;return(255&b)<<8|255&c}const decoder=new TextDecoder;function decodeString(a){let b=a.next().value,c=new Uint8Array(b);for(let d=0;d<b;d++)c[d]=a.next().value;return decoder.decode(c)}function decodeType(a){let b=a.next().value;switch(b){case 1:return!!a.next().value;case 2:return+a.next().value;case 3:return decodeString(a);default:throw new Error(`The type ${b} is not recognized.`);}}function decodeNode(a,b,c){switch(b){case 3:return c.createTextNode(decodeString(a));case 1:return decodeElement(a,c);default:throw new Error(`Unable to decode nodeType ${b}`);}}function decodeElement(a,b){let c=b.createElement(decodeString(a)),d=decodeString(a);for(;d;){let b=decodeString(a);c.setAttribute(d,b),d=decodeString(a)}let e=c,f=a.next().value;for(;f!==doneMutation_2_1_5_tags.Zero;){let c=decodeNode(a,f,b);e.appendChild(c),f=a.next().value}return c}var doneMutation_2_1_5_decode={decodeNode:decodeNode_1,decodeString:decodeString_1,decodeType:decodeType_1,toUint16:toUint16_1};const{decodeNode:decodeNode$1,decodeString:decodeString$1,decodeType:decodeType$1,toUint16:toUint16$1}=doneMutation_2_1_5_decode;function sepNode(a){return 8===a.nodeType&&"__DONEJS-SEP__"===a.nodeValue}function*walk(a,b){const c=getDocument(a),d=c.createTreeWalker(a,-1);let e=0,f=d.nextNode();for(;;)if(e===b)b=yield f;else if(!(e<b))e--,f=d.previousNode();else if(e++,f=d.nextNode(),sepNode(f)){var g=f;f=d.nextNode(),g.parentNode.removeChild(g)}}function getDocument(a){return 9===a.nodeType?a:a.ownerDocument}class MutationPatcher{constructor(a){this.root=a,this._startWalker()}_startWalker(){this.walker=walk(this.root,0),this.walker.next()}patch(a){const b=a[Symbol.iterator](),c=this.root,d=getDocument(c);for(let c of b){let a,e,f,g;switch(c){case doneMutation_2_1_5_tags.Zero:break;case doneMutation_2_1_5_tags.Insert:a=toUint16$1(b),e=toUint16$1(b);let h=b.next().value;g=decodeNode$1(b,h,d);let i=this.walker.next(a).value,j=getChild(i,e);i.insertBefore(g,j);break;case doneMutation_2_1_5_tags.Remove:a=toUint16$1(b);let k=toUint16$1(b),l=this.walker.next(a).value;g=getChild(l,k),l.removeChild(g),this._startWalker();break;case doneMutation_2_1_5_tags.Text:a=toUint16$1(b);let m=decodeString$1(b);f=this.walker.next(a).value,f.nodeValue=m;break;case doneMutation_2_1_5_tags.SetAttr:a=toUint16$1(b),f=this.walker.next(a).value;let n=decodeString$1(b),o=decodeString$1(b);f.setAttribute(n,o);break;case doneMutation_2_1_5_tags.RemoveAttr:a=toUint16$1(b),f=this.walker.next(a).value,f.removeAttribute(decodeString$1(b));break;case doneMutation_2_1_5_tags.Prop:a=toUint16$1(b),f=this.walker.next(a).value,f[decodeString$1(b)]=decodeType$1(b);break;default:throw new Error(`The instruction ${c} is not supported.`);}}}}function getChild(a,b){let c=0,d=a.firstChild;for(;c<b;)if(c++,d=d.nextSibling,d&&sepNode(d)){var e=d;d=d.nextSibling,e.parentNode.removeChild(e)}return d}var doneMutation_2_1_5_patch=MutationPatcher,isAttached=function(){return document.documentElement.hasAttribute("data-attached")},common={isAttached:isAttached};const isAttached$1=common.isAttached;async function read(a,b){let{done:c,value:d}=await a.read();return!(c||isAttached$1())&&(b.patch(d),!0)}async function incrementallyRender({fetch:a,url:b,onStart:c}){let d=await a(b,{crendentials:"same-origin"}),e=d.body.getReader(),f=new doneMutation_2_1_5_patch(document);for(await read(e,f),c();await read(e,f););}var render=incrementallyRender;const isAttached$2=common.isAttached;function depth(a){let b=0,c=document.createTreeWalker(a,4294967295,{acceptNode:function(a){let b=a.nodeType;return 1===b||3===b}});for(;c.nextNode();)b++;return b}function reattach(a,b){let c=new MutationObserver(function(){let d=depth(document.documentElement),e=depth(a.documentElement),f=isAttached$2();f||(f=d<=e),f&&(c.disconnect(),!isAttached$2()&&(document.documentElement.setAttribute("data-attached",""),b()))});c.observe(a,{childList:!0,subtree:!0})}var reattach_1=reattach;const url=document.documentElement.dataset.streamurl;function removeSelf(){let a=window.parent;a.closeSsrIframe&&a.closeSsrIframe()}render({fetch,url,onStart:()=>{reattach_1(window.parent.document,removeSelf)}});var irReattach={};export default irReattach;